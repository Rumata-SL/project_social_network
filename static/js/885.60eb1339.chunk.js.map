{"version":3,"file":"static/js/885.60eb1339.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Components/Users/Users.module.css?d486","Components/Users/UsersPresentation.tsx","Redux/users-selectors.ts","Components/Users/UsersContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Users_wrapper__Qu7DQ\",\"container\":\"Users_container__SOz-s\",\"logo\":\"Users_logo__lRsyO\",\"buttonImg\":\"Users_buttonImg__+SHfO\",\"containerPagination\":\"Users_containerPagination__xWrmT\"};","import React, {FC} from \"react\";\r\nimport us from \"./Users.module.css\";\r\nimport photo from \"./Icons/avatar.png\";\r\nimport {Pagination} from \"@mantine/core\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UsersType} from \"../../Redux/reducers/UsersReducer\";\r\n\r\n\r\ntype UsersPresentationPropsType = {\r\n    pageSize: number\r\n    currentPage: number\r\n    totalUsersCount: number\r\n    items: Array<UsersType>\r\n    followingInProgress: Array<number>\r\n\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n    toggleFollowingProgress: (isFetching: boolean, id: number) => void\r\n}\r\n\r\n\r\nexport let UsersPresentation: FC<UsersPresentationPropsType> = (props) => {\r\n const  {\r\n        items,\r\n        pageSize,\r\n        currentPage,\r\n        totalUsersCount,\r\n        followingInProgress,\r\n\r\n        follow,\r\n        unFollow,\r\n        onPageChanged,\r\n        toggleFollowingProgress,\r\n    } = props\r\n    let pagesCount: number = Math.ceil(totalUsersCount / pageSize)\r\n\r\n    let pages = [];\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div className={us.wrapper}>\r\n        {items.map(u => {\r\n            return <div key={u.id} className={us.container}>\r\n                <div className={us.usercontainer}>\r\n                    <div>\r\n                        <NavLink to={\"/profile/\" + u.id}><img\r\n                            src={u.photos?.small != null ? u.photos.small : photo}\r\n                            alt=\"photo\" className={us.logo}/></NavLink>\r\n                    </div>\r\n                    <span>\r\n                        <div> Name : {u.name}</div>\r\n                        <div>{u.status? u.status : \"no status\"}</div>\r\n                    </span>\r\n                    <div>\r\n                        {\r\n                            u.followed\r\n                                ? <button className={us.buttonImg}\r\n                                          disabled={followingInProgress.some(id => id === u.id)}\r\n                                          onClick={() => {\r\n                                              unFollow(u.id)\r\n                                          }}>follow\r\n                                </button>\r\n                                : <button\r\n                                    className={us.buttonImg}\r\n                                    disabled={followingInProgress.some(id => id === u.id)}\r\n                                    onClick={() => {\r\n                                        follow(u.id)\r\n                                    }}>unfollow\r\n                                </button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        })}\r\n\r\n        <div className={us.containerPagination}>\r\n            <Pagination\r\n                initialPage={currentPage}\r\n                total={pagesCount}\r\n                size=\"md\"\r\n                onChange={(e) => {\r\n                    onPageChanged(e)\r\n                }}\r\n            />\r\n        </div>\r\n    </div>\r\n}\r\n","import {AppStoreType} from \"./reducers/reduxStore\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nconst getUsersSelector = (state: AppStoreType) => {\r\n    return state.usersPage.items\r\n}\r\nexport const getUsers = createSelector(getUsersSelector, (items) => {\r\n    return items.filter(i => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStoreType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getIsFetching = (state: AppStoreType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getCurrentPage = (state: AppStoreType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getTotalUsersCount = (state: AppStoreType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getFollowingInProgress = (state: AppStoreType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\n","import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {Preloader} from \"../../common/preloader/Preloaded\";\r\nimport {AppStoreType} from \"../../Redux/reducers/reduxStore\";\r\nimport {UsersPresentation} from \"./UsersPresentation\";\r\n// import {WithAuthRedirect} from \"../../Hoc/WithAuthRedirect\";\r\nimport {\r\n    UsersType,\r\n    toggleFollowingProgress,\r\n    getUsersThunkCreator,\r\n    following,\r\n    unfollowing\r\n} from \"../../Redux/reducers/UsersReducer\";\r\nimport {\r\n    getCurrentPage, getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize, getTotalUsersCount, getUsers,\r\n} from \"../../Redux/users-selectors\";\r\n\r\n\r\ntype mapStatePropsType = {\r\n    pageSize: number\r\n    isFetching: boolean\r\n    currentPage: number\r\n    totalUsersCount: number\r\n    items: Array<UsersType>\r\n    followingInProgress: Array<number>\r\n}\r\ntype mapDispatchPropsType = {\r\n    following: (userId: number) => void\r\n    unfollowing: (userId: number) => void\r\n    toggleFollowingProgress: (isFetching: boolean, id: number) => void\r\n    getUsersThunkCreator: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\n\r\ntype UsersApiContainerPropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\nexport class UsersApiContainer extends React.Component<UsersApiContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsersThunkCreator(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsersThunkCreator(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching\r\n                ? <Preloader/>\r\n                : null}\r\n            <UsersPresentation\r\n                items={this.props.items}\r\n                follow={this.props.following}\r\n                pageSize={this.props.pageSize}\r\n                unFollow={this.props.unfollowing}\r\n                onPageChanged={this.onPageChanged}\r\n                currentPage={this.props.currentPage}\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                followingInProgress={this.props.followingInProgress}\r\n                toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n            />\r\n        </>\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStoreType) => {\r\n    return {\r\n        items: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        isFetching: getIsFetching(state),\r\n        currentPage: getCurrentPage(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\n\r\nexport const UsersContainer = compose<React.ComponentType>(connect(mapStateToProps, {\r\n    following,\r\n    unfollowing,\r\n    getUsersThunkCreator,\r\n    toggleFollowingProgress,\r\n}))(UsersApiContainer)\r\n\r\n\r\n// }), WithAuthRedirect)(UsersApiContainer)\r\n\r\n/*const mapStateToProps = (state: AppStoreType) => {\r\n    return {\r\n        items: state.usersPage.items,\r\n        pageSize: state.usersPage.pageSize,\r\n        isFetching: state.usersPage.isFetching,\r\n        currentPage: state.usersPage.currentPage,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}*/\r\n/*export const UsersContainer = WithAuthRedirect(connect(mapStateToProps, {\r\n    following,\r\n    unfollowing,\r\n    getUsersThunkCreator,\r\n    toggleFollowingProgress,\r\n})(UsersApiContainer))*/\r\n\r\n/*const mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        follow: (userId: number) => {\r\n            dispatch(FollowAC(userId))\r\n        },\r\n        unfollow: (userId: number) => {\r\n            dispatch(UnFollowAC(userId))\r\n        },\r\n        setUsers: (items: Array<UsersType>) => {\r\n            dispatch(SetUsersAC(items))\r\n        },\r\n        setCurrentPage: (currentPage: number) => {\r\n            dispatch(SetCurrentPageAC(currentPage))\r\n        },\r\n        setTotalUsersCount: (totalUsersCount: number) => {\r\n            dispatch(SetTotalUsersCountAC(totalUsersCount))\r\n        },\r\n        toggleIsFetching: (isFetching: boolean) => {\r\n            dispatch(ToggleIsFetchingAC(isFetching))\r\n        }\r\n    }\r\n}*/\r\n\r\n// export const UsersContainer = connect(mapStateToProps, mapDispatchToProps)(UsersApiContainer)\r\n\r\n/*type UsersApiContainerPropsType = {\r\n    items: Array<UsersType>\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    setUsers: (user: Array<UsersType>) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalUsersCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    toggleFollowingProgress:(isFetching: boolean, id: number)=>void\r\n    getUsersThunkCreator:(currentPage: number, pageSize: number)=>void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress:Array<number>\r\n}*/\r\n/*this.props.toggleIsFetching(true)\r\n\r\n        usersApi.getUsers(this.props.currentPage,this.props.pageSize).then(data => {\r\n                this.props.toggleIsFetching(false)\r\n                this.props.setUsers(data.items)\r\n                this.props.setTotalUsersCount(data.totalCount)\r\n\r\n            })*/"],"names":["UsersPresentation","props","items","pageSize","currentPage","totalUsersCount","followingInProgress","follow","unFollow","onPageChanged","pagesCount","toggleFollowingProgress","Math","ceil","pages","i","push","className","us","map","u","to","id","src","photos","small","photo","alt","name","status","followed","disabled","some","onClick","Pagination","initialPage","total","size","onChange","e","getUsers","createSelector","state","usersPage","filter","getPageSize","getIsFetching","isFetching","getCurrentPage","getTotalUsersCount","getFollowingInProgress","UsersApiContainer","pageNumber","getUsersThunkCreator","this","following","unfollowing","React","UsersContainer","compose","connect"],"sourceRoot":""}